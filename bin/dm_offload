#!/usr/bin/env python

# ================================================== #
#                                                    #
#     ___                __  __ _                 _  #
#    /   \/\/\     ___  / _|/ _| | ___   __ _  __| | #
#   / /\ /    \   / _ \| |_| |_| |/ _ \ / _` |/ _` | #
#  / /_// /\/\ \ | (_) |  _|  _| | (_) | (_| | (_| | #
# /___,'\/    \/  \___/|_| |_| |_|\___/ \__,_|\__,_| #
#                                                    #
# ================================================== #

import os
import time
import sys
import numpy as np
import math as m
import copy
#from xaosim.scexao_shmlib import shm
from pyMilk.interfacing.isio_shmlib import SHM as shm

MILK_SHM_DIR = os.environ['MILK_SHM_DIR']

home = os.getenv("HOME")

args = sys.argv[1:]
if args != []:
    if isinstance(int(args[0]),int):
        shm_im = shm(MILK_SHM_DIR + "/dm00disp%02d.im.shm" % (int(args[0]),))
        os.system("scexaostatusext \"dmoffload 'CLOSED chn %02d' 1\""% (int(args[0]),))
else:
    shm_im = shm(MILK_SHM_DIR + "/dm00disp.im.shm")
    os.system("scexaostatusext \"dmoffload 'CLOSED chn 12' 1\"")

os.system("dologext \"DM offload: starting procedure\"")

# Reading in shared memory
#------------------------

def read_shm():
    dm_command = shm_im.get_data()
    return dm_command

# Find center of image
#------------------------

def asymetry(nim, cx, cy):
    for  i in range(nim):
        if i == 0:
            dm_command = read_shm()/float(nim)
            temp = copy.deepcopy(dm_command)
            time.sleep(0.001)
        else:
            temp2 = read_shm()/float(nim)
            #if np.mean(temp2) == np.mean(temp):
            #    loop_on = False
            #else:
            #    loop_on = True
            dm_command += temp2
            time.sleep(0.001)
    asx = np.mean(dm_command[:,0:cx])-np.mean(dm_command[:,cx:])
    asy = np.mean(dm_command[0:cy,:])-np.mean(dm_command[cy:,:])
    return [asx, asy, loop_on]

# Main
#------------------------


cnt = 0
cx = 24
cy = 24
threshold = 0.08

loop_on = True

asx0 = 0
asy0 = 0

# loop
try:
    while loop_on:
        cnt = cnt+1
        
        [asx, asy, loop_on] = asymetry(1000, cx, cy)
        if asx == asx0 or asy == asy0:
            loop_on = False
        asx0 = asx
        asy0 = asy
        print([asx, asy, loop_on])
        #time.sleep(1)
        # if the psf is still north-west of the hotspot, move south-east
        if abs(asx) > threshold:
            x_m = int(m.copysign(10, asx))
            print("x:",x_m)
            os.system("ssh scexao@scexao2 \"/home/scexao/bin/devices/dm_stage x push %+i\"" %x_m)
            time.sleep(0.1)
            #os.system("ssh scexao@scexao2 \"/home/scexao/bin/log DM offload: offloading y %+i\"" %x_m)
        if abs(asy) > threshold:
            y_m = int(m.copysign(10, asy))
            print("y:",y_m)
            os.system("ssh scexao@scexao2 \"/home/scexao/bin/devices/dm_stage y push %+i\"" %y_m)
            time.sleep(0.1)
            #os.system("ssh scexao@scexao2 \"/home/scexao/bin/log DM offload: offloading x %+i\"" %y_m)
    shm_im.close()
    os.system("dologext \"DM offload: procedure stopped\"")
    os.system("scexaostatusext \"dmoffload 'OPEN' 3\"")

except KeyboardInterrupt:
    shm_im.close()
    os.system("dologext \"DM offload: procedure stopped\"")
    os.system("scexaostatusext \"dmoffload 'OPEN' 3\"")

