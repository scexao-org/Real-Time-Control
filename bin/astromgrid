#!/bin/bash

EXPECTED_ARGS=2
DMindex="00"

datestr=`date -u +%Y%m%d`
timestr=`date -u +%Y%m%dT%H%M%S.%3N`
LOGDIR="/home/scexao/logdir/${datestr}/"
mkdir -p ${LOGDIR}
LOGFILE="astromgrid.${datestr}.log"

echo "${timestr} $0 $@" >> ${LOGDIR}/${LOGFILE} 


GRIDFILE="/home/scexao/conf/dm_patterns/grid2.fits"

function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $0 : ASTOMETRY GRID $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  Start/Stop astrogrid"
echo "     15.5 l/D on diagonal (default)"
echo "  If -S ( SYNCHRO mode ), astro grid switches between 2 patterns, specified by -A and -B options"
echo ""
echo "   "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [options] <ampl [um]> <freq [Hz]>"
echo "     $0 -k"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)             help"
echo "     $(tput bold)-k$(tput sgr0)             Stop astrogrid (default: start)"
echo "     $(tput bold)-t$(tput sgr0)             Test mode: do not log"
echo "     $(tput bold)-b$(tput sgr0) <bin>       pixel binning (default=2)"
echo "     $(tput bold)-n$(tput sgr0) <NBcycle>   number cycles (default=1)"
echo "     $(tput bold)-l$(tput sgr0)             low latency mode: astrogrid takes control of DM updates"
echo "     $(tput bold)-L$(tput sgr0)             low latency mode: loop takes control of DM updates"
echo "                    Astromgrid slaved to dmdisp updates"
echo "     $(tput bold)-m$(tput sgr0) <mode>      grid mode (default=0)"
echo "          mode = 0    XYdiag grid         sep = CPAm * sqrt(2)/b"
echo "          mode = 1    X grid              sep = CPAm * 1/b"
echo "          mode = 2    Y grid              sep = CPAm * 1/b"
echo "          mode = 3    Xdiag grid          sep = CPAm * 2*sqrt(2)/b"
echo "          mode = 4    Ydiag grid          sep = CPAm * 2*sqrt(2)/b"
echo "          mode = 5    XYdiag -> OFF ->    sep = CPAm * sqrt(2)/b"
echo "          mode = 6    X -> OFF ->         sep = CPAm * 1/b"
echo "          mode = 7    Y -> OFF ->         sep = CPAm * 1/b"
echo "          mode = 8    X -> Y ->           sep = CPAm * 1/b"
echo "          mode = 9    Xdiag -> OFF ->     sep = CPAm * 2*sqrt(2)/b"
echo "          mode = 10   Ydiag -> OFF ->     sep = CPAm * 2*sqrt(2)/b"
echo "          mode = 11   Xdiag -> Ydiag ->   sep = CPAm * 2*sqrt(2)/b"
echo ""
echo "          mode = 99   custom - read from shared mem stream gridc, gridc_000, gridc_001 ..."
echo ""
echo "     $(tput bold)-S$(tput sgr0) <stream>  SYNCHRO mode (default OFF)."
echo "                  Switches between grid modes A and B based on stream updates"
echo "     $(tput bold)-A$(tput sgr0) <mode>      SYNC grid mode A (default=3)"
echo "     $(tput bold)-B$(tput sgr0) <mode>      SYNC grid mode B (default=4)"
echo "     $(tput bold)-o$(tput sgr0) <offset>    SYNC offset [us] (default=0)"
echo "     $(tput bold)-p$(tput sgr0) <duration>  SYNC period (default=1)"
echo ""
echo " $(tput bold)INPUT:$(tput sgr0)"
echo "     <ampl [um]>     modulation amplitude [um]"
echo "     <freq [Hz]>     modulation frequency [Hz]"
echo ""
echo " $(tput bold)EXAMPLE:$(tput sgr0)"
echo "		$0 0.01 1000"
echo "		$0 -k"
echo ""
echo " $(tput bold)NOTES:$(tput sgr0)"
echo " The low latency option will have astrogrid take control of the DM update"
echo " DM will be updated ONLY when new astrogrid iteration, and other updates "
echo " (for example from AO loop) will wait for these regular updates"
echo " IMPORTANT: do not run low latency mode at speed slower than AO loop !" 
echo ""
echo "SAPHIRA / CHARIS grid:"
echo "   astromgrid -m 11 -b 1 -l -n 4 0.05 2000"
echo "   astromgrid -m 0 -b 2 -l -n 1 0.05 2000"
echo ""
echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
    printf "%20s       Astrogrid start/stop\n" "$0" 
}



EXITSTATUS=0

function checkFile {
if [ -f $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}

function checkDir {
if [ -d $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}

function cmdexists()
{
  command -v "$1" >/dev/null 2>&1
}


function checkCommand {
if cmdexists $1; then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) found"
else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) not installed.  Aborting."; EXITSTATUS=1;
fi

}


# ================= OPTIONS =============================




# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done



STOPAG="0"
AstroGridBin="2" # 1: 15.5 l/D
AstroGridMode="0" # XY grid
NBcycle="1"
LOWLATENCYmode="0"

SYNCHRO="OFF"
AGridModeA="3"
AGridModeB="4"
SYNCperiod="1"
SYNCoffset="0"
SYNCstream="ircam1"
SYNCsemtrig="4"

TESTMODE="0"

while getopts :hkb:m:n:lLS:A:B:o:p:t FLAG; do
  case $FLAG in
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    k) # stop astrogrid
    EXPECTED_ARGS=0
    STOPAG="1"
    ;;
    t)
    TESTMODE="1"
    ;;
    b)
    AstroGridBin="$OPTARG"
    ;;
    n)
    NBcycle="$OPTARG"
    ;;
    l)
    LOWLATENCYmode="1"
    ;;
    L)
    LOWLATENCYmode="2"
    ;;
    m)
    AstroGridMode="$OPTARG"
    ;;
    S)
    SYNCHRO="ON"
    SYNCstream="$OPTARG"
    ;;
    A)
    AGridModeA="$OPTARG"
    ;;
    B)
    AGridModeB="$OPTARG"
    ;;
    o)
    SYNCoffset="$OPTARG"
    ;;
    p)
    SYNCperiod="$OPTARG"
    ;;    
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1)) 
### End getopts code ###






#if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
#if [ "$#" -ne $NBARGS ]; then
#    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
#fi
#printHELP
#        exit
#fi




if [ "$EXPECTED_ARGS" -ne "0" ]; then

if [ "$1" = "help" ] || [ "$#" -ne $EXPECTED_ARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi
fi


# ======================= CHECK REQUIRED FILES =================================
echo ""
checkFile $GRIDFILE



# ============================= CHECK IF COMMAND EXISTS ==========================

checkCommand cacao







tmuxsession="astrogrid"
CPAm=22.5


if [ "$AstroGridMode" = "0" ]; then
GEOMname="XYdiag"
sep=$( echo "$CPAm $AstroGridBin" | awk '{printf "%.2f \n", $1/$2*sqrt(2.0)}' )
fi

if [ "$AstroGridMode" = "1" ]; then
GEOMname="X"
sep=$( echo "$CPAm $AstroGridBin" | awk '{printf "%.2f \n", $1/$2}' )
fi

if [ "$AstroGridMode" = "2" ]; then
GEOMname="Y"
sep=$( echo "$CPAm $AstroGridBin" | awk '{printf "%.2f \n", $1/$2}' )
fi

if [ "$AstroGridMode" = "3" ]; then
GEOMname="Xdiag"
sep=$( echo "$CPAm $AstroGridBin" | awk '{printf "%.2f \n", sqrt(2.0)/2.0*$1/$2}' )
fi

if [ "$AstroGridMode" = "4" ]; then
GEOMname="Ydiag"
sep=$( echo "$CPAm $AstroGridBin" | awk '{printf "%.2f \n", sqrt(2.0)/2.0*$1/$2}' )
fi

if [ "$AstroGridMode" = "5" ]; then
GEOMname="XYdiag-OFF"
sep=$( echo "$CPAm $AstroGridBin" | awk '{printf "%.2f \n", $1/$2*sqrt(2.0)}' )
fi

if [ "$AstroGridMode" = "6" ]; then
GEOMname="X-OFF"
sep=$( echo "$CPAm $AstroGridBin" | awk '{printf "%.2f \n", $1/$2}' )
fi

if [ "$AstroGridMode" = "7" ]; then
GEOMname="Y-OFF"
sep=$( echo "$CPAm $AstroGridBin" | awk '{printf "%.2f \n", $1/$2}' )
fi

if [ "$AstroGridMode" = "8" ]; then
GEOMname="X-Y"
sep=$( echo "$CPAm $AstroGridBin" | awk '{printf "%.2f \n", $1/$2}' )
fi

if [ "$AstroGridMode" = "9" ]; then
GEOMname="Xdiag-OFF"
sep=$( echo "$CPAm $AstroGridBin" | awk '{printf "%.2f \n", sqrt(2.0)/2.0*$1/$2}' )
fi

if [ "$AstroGridMode" = "10" ]; then
GEOMname="Ydiag-OFF"
sep=$( echo "$CPAm $AstroGridBin" | awk '{printf "%.2f \n", sqrt(2.0)/2.0*$1/$2}' )
fi

if [ "$AstroGridMode" = "11" ]; then
GEOMname="Xdiag-Ydiag"
sep=$( echo "$CPAm $AstroGridBin" | awk '{printf "%.2f \n", sqrt(2.0)/2.0*$1/$2}' )
fi

if [ "$AstroGridMode" = "99" ]; then
GEOMname="custom"
sep="0.00"
fi


echo "CPAm          = $CPAm"
echo "AstroGridBin  = $AstroGridBin"
echo "sep           = $sep"



if [ "$SYNCHRO" = "ON" ]; then
  echo "SYNCHRO is ON"
  echo "Grid patterns : $AGridModeA $AGridModeB"
  echo "SYNC offset = $SYNCoffset us"
fi



if [ "$STOPAG" = "0" ]; then

  # log information
  /home/scexao/bin/dologext "ASTROGID ON  amp = $1 um  speed = $2 Hz  15.5 l/d diag" &
  /home/scexao/bin/scexaostatusext "grid_st ${GEOMname} 0" &
  /home/scexao/bin/scexaostatusext "grid_amp $1" &
  /home/scexao/bin/scexaostatusext "grid_mod $2" &
  /home/scexao/bin/scexaostatusext "grid_sep $sep" &

  tmux kill-session -t ${tmuxsession} &> /dev/null
  tmux new-session -d -s ${tmuxsession} 
  tmux send-keys -t ${tmuxsession} "cacao" C-m
  tmux send-keys -t ${tmuxsession} "readshmim dm${DMindex}disp09" C-m
  #tmux send-keys -t ${tmuxsession} "loadfits \"$GRIDFILE\" grid" C-m
  #tmux send-keys -t ${tmuxsession} "gridp=grid*$1/0.2" C-m
  #tmux send-keys -t ${tmuxsession} "gridm=0-gridp" C-m
  #tmux send-keys -t ${tmuxsession} "merge3d gridp gridm gridc" C-m

  if [ "$LOWLATENCYmode" = "1" ]; then
    tmux send-keys -t ${tmuxsession} "aolsetdmTrigChan ${DMindex} 9" C-m
    tmux send-keys -t ${tmuxsession} "aolsetdmTrigSem ${DMindex} 5" C-m
    tmux send-keys -t ${tmuxsession} "aolsetdmTrigMode ${DMindex} 1" C-m
  fi

  if [ "$LOWLATENCYmode" = "2" ]; then
    tmux send-keys -t ${tmuxsession} "aolsetdmTrigChan ${DMindex} 03" C-m # chan 03 is loop control
    tmux send-keys -t ${tmuxsession} "aolsetdmTrigSem ${DMindex} 5" C-m 
    tmux send-keys -t ${tmuxsession} "aolsetdmTrigMode ${DMindex} 1" C-m
  fi

  if [ "$SYNCHRO" = "OFF" ]; then
    if [ "${AstroGridMode}" = "99" ]; then
      tmux send-keys -t ${tmuxsession} "readshmim gridc" C-m
    else
      tmux send-keys -t ${tmuxsession} "aoloopcontroldmastrogseq grid0c 0 $AstroGridMode $AstroGridBin $NBcycle" C-m
      tmux send-keys -t ${tmuxsession} "gridc=grid0c*$1" C-m
      tmux send-keys -t ${tmuxsession} "savefits gridc \"!gridc.fits\"" C-m      
    fi
    tmux send-keys -t ${tmuxsession} "tus=1000000/$2" C-m

    if [ "$LOWLATENCYmode" = "2" ]; then
      tmux send-keys -t ${tmuxsession} "# LOWLATENCYmode = $LOWLATENCYmode" C-m
      tmux send-keys -t ${tmuxsession} "readshmim dm${DMindex}disp03" C-m
      tmux send-keys -t ${tmuxsession} "creaimstream gridc dm${DMindex}disp09 tus 1 1 0 dm${DMindex}disp03 5 0" C-m
    else
      tmux send-keys -t ${tmuxsession} "# LOWLATENCYmode = $LOWLATENCYmode" C-m
      tmux send-keys -t ${tmuxsession} "creaimstream gridc dm${DMindex}disp09 tus 1 1 0 nullim 5 0" C-m
    fi

  else
    tmux send-keys -t ${tmuxsession} "readshmim $SYNCstream" C-m
    
    if [ "${AstroGridMode}" = "99" ]; then
      tmux send-keys -t ${tmuxsession} "readshmim gridc_000" C-m
      tmux send-keys -t ${tmuxsession} "readshmim gridc_001" C-m
    else
      tmux send-keys -t ${tmuxsession} "aoloopcontroldmastrogseq grid0cA 0 $AGridModeA $AstroGridBin $NBcycle" C-m
      tmux send-keys -t ${tmuxsession} "aoloopcontroldmastrogseq grid0cB 0 $AGridModeB $AstroGridBin $NBcycle" C-m
      tmux send-keys -t ${tmuxsession} "gridc_000=grid0cA*$1" C-m
      tmux send-keys -t ${tmuxsession} "gridc_001=grid0cB*$1" C-m
      tmux send-keys -t ${tmuxsession} "savefits gridc_000 \"!gridcA.fits\"" C-m
      tmux send-keys -t ${tmuxsession} "savefits gridc_001 \"!gridcB.fits\"" C-m
    fi
    tmux send-keys -t ${tmuxsession} "tus=1000000/$2" C-m
    tmux send-keys -t ${tmuxsession} "creaimstream gridc dm${DMindex}disp09 tus 2 $SYNCperiod $SYNCoffset $SYNCstream $SYNCsemtrig 0" C-m
  fi
  
  tmux send-keys -t ${tmuxsession} "exitCLI" C-m

else

  /home/scexao/bin/dologext "ASTROGID OFF" &
  /home/scexao/bin/scexaostatusext "grid_st OFF 1" &

  tmux send-keys -t ${tmuxsession} "" C-c
  tmux send-keys -t ${tmuxsession} "exitCLI" C-m
  tmux kill-session -t ${tmuxsession} &> /dev/null

  /home/scexao/bin/dmdispzero 00 09

  # revert to default DM operation
cacao << EOF
aolsetdmTrigMode ${DMindex} 0
exitCLI
EOF


fi
