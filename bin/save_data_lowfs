#!/usr/bin/env python

# ------------------------------------------------------------ #
#      _       _            __                                 #
#   __| | __ _| |_ __ _    / _| ___  _ __                      #
#  / _` |/ _` | __/ _` |  | |_ / _ \| '__|                     #
# | (_| | (_| | || (_| |  |  _| (_) | |                        #
#  \__,_|\__,_|\__\__,_|  |_|  \___/|_|                        #
#                                                              #
#  _     _            _   _  __ _           _   _              #
# (_) __| | ___ _ __ | |_(_)/ _(_) ___ __ _| |_(_) ___  _ __   #
# | |/ _` |/ _ \ '_ \| __| | |_| |/ __/ _` | __| |/ _ \| '_ \  #
# | | (_| |  __/ | | | |_| |  _| | (_| (_| | |_| | (_) | | | | #
# |_|\__,_|\___|_| |_|\__|_|_| |_|\___\__,_|\__|_|\___/|_| |_| #
#                                                              #
# ------------------------------------------------------------ #

import os
import time
import sys
import numpy as np
from numpy.linalg import inv
import math as m
from astropy.io import fits as pf
import datetime as dt
from datetime import datetime

import ident_model2 as imo
import copy as cp
import matplotlib.pyplot as plt

home = os.getenv('HOME')
sys.path.append(home+'/src/lib/python/')
from   scexao_shm   import shm
import vibration as vib
    
# ------------------------------------------------------------------
#                       global variables
# ------------------------------------------------------------------
lomolshm = shm("/tmp/aol1_modeval_ol.im.shm") #SHM of pseudo-open loop data
lomclshm = shm("/tmp/aol1_modeval.im.shm") # SHM of closed-loop data

# ------------------------------------------------------------------
#               Initialization of variables
# ------------------------------------------------------------------

npoints = 4000
nmodes = 2
fsamp = 170.

times = np.arange(npoints)/fsamp
npoints2 = fsamp*5
nshift = int(fsamp*5//2)


psd_OL = np.zeros((npoints2//2,nmodes))
psd_CL = np.zeros((npoints2//2,nmodes))

y_OL = lomolshm.get_data(False, True).astype(float)
y_OL = y_OL.squeeze()[:nmodes]
y_n = lomclshm.get_data(False, True).astype(float)
y_n = y_n.squeeze()[:nmodes]
datacl = np.zeros((npoints, nmodes), dtype=float)
dataol = np.zeros((npoints, nmodes), dtype=float)

if not os.path.isfile("/tmp/LOWFS_restmpplot.im.shm"):
    os.system("creashmim LOWFS_restmpplot %d %d" % (npoints,5))
restmpplotshm = shm("/tmp/LOWFS_restmpplot.im.shm", verbose = False)
if not os.path.isfile("/tmp/LOWFS_respsdplot.im.shm"):
    os.system("creashmim LOWFS_respsdplot %d %d" % (npoints2//2,5))
respsdplotshm = shm("/tmp/LOWFS_respsdplot.im.shm", verbose = False)
restmpplot = restmpplotshm.get_data()
respsdplot = respsdplotshm.get_data()

cnt0 = -1
j = 0

# ===================================================================
while True: 
        
    cnt = lomolshm.get_counter()
    if (cnt <= cnt0):
        cnt = lomolshm.get_counter()
        time.sleep(0.0002)
    elif (cnt > cnt0):
        y_n = lomclshm.get_data(False, True).astype(float)
        datacl[j,:] = y_n.squeeze()[:nmodes]
        y_OL = lomolshm.get_data(False, True).astype(float)
        dataol[j,:] = y_OL.squeeze()[:nmodes]
        j += 1
    cnt0 = cnt
    if j == npoints:
        restmpplot[0,:] = times
        restmpplot[1:3,:] = dataol.T
        restmpplot[3:,:] = datacl.T
        for k in range(nmodes):
            res = vib.psd2d(dataol[:,k], npoints2, nshift, fsamp)
            psd_OL[:,k] = np.mean(res.psd_2d, axis=0)
            res = vib.psd2d(datacl[:,k], npoints2, nshift, fsamp)
            psd_CL[:,k] = np.mean(res.psd_2d, axis=0)
        freq = res.X[0,:]
        respsdplot[0,:] = freq
        respsdplot[1:3,:] = psd_OL.T
        respsdplot[3:,:] = psd_CL.T
        restmpplotshm.set_data0(restmpplot)
        respsdplotshm.set_data0(respsdplot)

    j %= npoints

