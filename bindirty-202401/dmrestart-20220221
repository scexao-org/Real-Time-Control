#!/bin/bash



# Autobouncing to target computer
AUTOBOUNCE_TARGET="sc6l"
I_AM_TARGET=$(python -m swmain.autobounce check ${AUTOBOUNCE_TARGET})
if [[ I_AM_TARGET -ne "1" ]]; then
    python -m swmain.autobounce bounce $AUTOBOUNCE_TARGET $0 $@
    exit $?
fi

# number of arguments to script
NBARGS=0


# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`


function printHELP {
    echo "------------------------------------------------------------------------"
    echo "$(tput bold) $pname : (RE-)START DM $(tput sgr0)"
    echo "------------------------------------------------------------------------"
    echo "  (re)start deformable mirorr"
    echo "   "
    echo " $(tput bold)USAGE:$(tput sgr0)"
    echo "     $0 [-hk]"
    echo ""
    echo " $(tput bold)OPTIONS:$(tput sgr0)"
    echo "     $(tput bold)-h$(tput sgr0)          help"
    echo "     $(tput bold)-k$(tput sgr0)          kill DM processes but do not restart"
    echo "     $(tput bold)-c$(tput sgr0)          kill only DM connections to scexaoCTRL"
    echo "     $(tput bold)-C$(tput sgr0)          restart only DM connections to scexaoCTRL"
    echo "     $(tput bold)-L$(tput sgr0)          (L)ocal only: do not start connections to scexaoCTRL "
    echo ""
    echo ""
    echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
    printf "%20s       (Re-)start DM processes\n" "$0"
}

EXITSTATUS=0


function cmdexists()
{
    command -v "$1" >/dev/null 2>&1
}


function checkCommand {
    if cmdexists $1; then
        echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) found"
    else
        echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) not installed.  Aborting."; EXITSTATUS=1;
    fi
    
}


# ================= OPTIONS =============================


# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
    shift
    case "$arg" in
        "--help") set -- "$@" "-h" ;;
        "--help1")
            set -- "$@" "-h"
            singlelinehelp=1;
        ;;
        *)        set -- "$@" "$arg"
    esac
done

# Defaults
KILLMAIN="1"
RESTARTMAIN="1"
KILLCONN="1"
RESTARTCONN="1"
LOCAL="0"

#Parse command line flags
while getopts :hkcCL FLAG; do
    case $FLAG in
        h)  #show help
            if [ "$singlelinehelp" -eq "0" ]; then
                printHELP
            else
                printHELP1
            fi
            exit
        ;;
        k) # kill DM processes but do not restart
            KILLMAIN="1"
            RESTARTMAIN="0"
            KILLCONN="1"
            RESTARTCONN="0"
        ;;
        c)
            KILLMAIN="0"
            RESTARTMAIN="0"
            KILLCONN="1"
            RESTARTCONN="0"
        ;;
        C)
            KILLMAIN="0"
            RESTARTMAIN="0"
            KILLCONN="1"
            RESTARTCONN="1"
        ;;
        L)
            LOCAL="1"
        ;;
        \?) #unrecognized option - show help
            echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
            printHELP
        ;;
    esac
done

shift $((OPTIND-1))  #This tells getopts to move on to the next argument.

### End getopts code ###



if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
    if [ "$#" -ne $NBARGS ]; then
        echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
    fi
    printHELP
    exit
fi

# ======================= CHECK REQUIRED FILES =================================
echo ""

# ============================= CHECK IF COMMAND EXISTS ==========================

checkCommand cacao

if [ $EXITSTATUS -eq 1 ]; then
    echo ""
    echo "$(tput setaf 1)$(tput bold) REQUIRED FILES, COMMANDS NOT FOUND: EXITING $(tput sgr0)"
    echo ""
    exit
else
    echo ""
fi

if [ "$LOCAL" = "0" ]; then
    # TODO CONNECTION FEATURE DISABLED FOR NOW
    # if [ "$KILLCONN" = "1" ]; then
    #     echo "[1] killing scexoCTRL connection"
    #     ssh scexao@scexaoCTRL "LD_LIBRARY_PATH=$LD_LIBRARY_PATH /home/scexao/bin/dmTCPsend_kill"
    # fi
    
    
    # if [ "$RESTARTMAIN" = "1" ]; then
    #     sleep 6
    #     echo "[2] initialize shared mem strucutres ..."
    #     ssh scexao@scexaoCTRL "LD_LIBRARY_PATH=$LD_LIBRARY_PATH /home/scexao/bin/dmshminit"
    # fi
    echo ""
fi



if [ "$KILLMAIN" = "1" ]; then
    echo "[3] kill dm00comb"
    
    # TODO what if there's no FIFO ????
    FPS_FIFO=$(ls -f ${MILK_SHM_DIR}/milkCLIfifo.fpsCTRL.* | head -n 1)
    echo "confstop DMcomb-00" >> ${FPS_FIFO}
    echo "runstop DMcomb-00" >> ${FPS_FIFO}

    sleep 1.0
    tmux kill-session -t DMcomb-00
fi

if [ "$LOCAL" = "0" ]; then
    # TODO CONNECTION FEATURE DISABLED FOR NOW
    # if [ "$KILLCONN" = "1" ]; then
    #     echo "[5] kill dmTCPrcv"
    #     tmux kill-session -t "dmTCPrcv-0"
    #     tmux kill-session -t "dmTCPrcv-1"
    # fi
    
    # if [ "$RESTARTCONN" = "1" ]; then
    #     echo "[6] start dmTCPrcv and dmTCPsendp"
    #     dmTCPreceivep 0
    #     dmTCPreceivep 1
    #     sleep 3
    #     ssh scexao@scexaoCTRL "LD_LIBRARY_PATH=$LD_LIBRARY_PATH /home/scexao/bin/dmTCPsendp"
    #     sleep 5
    # fi
    echo ""
fi

if [ "$KILLMAIN" = "1" ]; then
    echo "[8] kill dmopttrig"
    sudo pkill bmc
    tmux kill-session -t dmopttrig
fi

if [ "$RESTARTMAIN" = "1" ]; then
    echo "[9] Start DM optical link interface ..."
    sleep 1
    # Shall not sudo in tmuxes
    BMC_MDRV_ROOT="/home/scexao/src/DMoptical"
    BMC_CACAO_ROOT="/home/scexao/src/DM_BMC"
    sudo insmod ${BMC_MDRV_ROOT}/bin/bmc_mdrv.ko
    sudo chmod o+rw /dev/bmc_mdrv0
    
    tmux new-session -d -s dmopttrig
    milk-exec "creaushortimshm dmvolt 50 50"
    sleep 0.2
    tmux send-keys -t dmopttrig "${BMC_CACAO_ROOT}/run_2k_main -A" C-m
    #tmux send-keys -t dmopttrig "${BMC_CACAO_ROOT}/runBMCcacao -K" C-m
    #sleep 0.5
    #tmux send-keys -t dmopttrig "${BMC_CACAO_ROOT}/runBMCcacao -D 0" C-m
    #sleep 0.5
    #tmux send-keys -t dmopttrig "${BMC_CACAO_ROOT}/runBMCcacao -L" C-m
    sleep 0.5
    pidlist=$( pgrep run_2k_main )
    for p in ${pidlist}; do
        milk-exec "csetandprioext $p dmdrv 0"
    done
fi


if [ "$RESTARTMAIN" = "1" ]; then
    echo "[4] Configure and start dm00comb"
    milk-exec -n DMcomb-00 "mload cacaoAOloopControlDM; cacaodm.aolcontrolDMcomb _FPSINIT_  00"

    # Reload the fpsCTRL
    

    # FPS parameters for BMC 2k
    
    FPS_FIFO=$(ls -f ${MILK_SHM_DIR}/milkCLIfifo.fpsCTRL.* | head -n 1)
   
    echo "rescan" >> ${FPS_FIFO}


    echo "setval DMcomb-00.DMxsize 50" >> ${FPS_FIFO}
    echo "setval DMcomb-00.DMysize 50" >> ${FPS_FIFO}
    echo "setval DMcomb-00.AveMode 1" >> ${FPS_FIFO}
    echo "setval DMcomb-00.procinfo.loopcntMax -1" >> ${FPS_FIFO}

    echo "setval DMcomb-00.procinfo.RTprio 49" >> ${FPS_FIFO}

    echo "setval DMcomb-00.procinfo.cset dmcomb" >> ${FPS_FIFO}
    TASKSET=$(cset set dmcomb | tail -n 1 | awk '{print $2}')
    echo "setval DMcomb-00.procinfo.taskset ${TASKSET}" >> ${FPS_FIFO}

    echo "setval DMcomb-00.procinfo.triggermode 3" >> ${FPS_FIFO}
    echo "setval DMcomb-00.procinfo.triggersname dm00disp03" >> ${FPS_FIFO}
    echo "setval DMcomb-00.procinfo.triggerdelay 0.00001" >> ${FPS_FIFO}
    echo "setval DMcomb-00.procinfo.triggertimeout 10.0" >> ${FPS_FIFO}
    
    echo "setval DMcomb-00.option.voltmode ON" >> ${FPS_FIFO}
    echo "setval DMcomb-00.option.volttype 2" >> ${FPS_FIFO}
    echo "setval DMcomb-00.option.voltname dmvolt" >> ${FPS_FIFO}
    echo "setval DMcomb-00.option.stroke100 1.0" >> ${FPS_FIFO}
    echo "setval DMcomb-00.option.DClevel 0.7" >> ${FPS_FIFO}
    echo "setval DMcomb-00.option.maxvolt 150" >> ${FPS_FIFO}
    
    echo "confwupdate" >> ${FPS_FIFO}


    echo "tmuxstart DMcomb-00" >> ${FPS_FIFO}
    sleep 0.2
    # TODO this will fail due to no started tmux yet
    echo "confstart DMcomb-00" >> ${FPS_FIFO}
    sleep 2.0
    echo "runstart DMcomb-00" >> ${FPS_FIFO}

    # TODO what abouuuuut cset ?
    
fi
