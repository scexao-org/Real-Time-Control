#!/bin/bash

# adapted from https://www.osadl.org/uploads/media/mklatencyplot.bash
this_pid=`echo $$`

INDEX=$1 # Index of test
STRESS=$2
DURATION=$3 # Duration of stress in seconds 

MLOCK=0
HASCSET="NO"
NBcores=$(nproc)

# Check for a cset named "user" from cset shield
cset set user > /dev/null

if [ $? = "2" ]; then
	echo "NO CSET: fallback on taskset affinity"
	CSET=`taskset -p -c $this_pid | awk {'print $NF'}`
else
	HASCSET="YES"
	CSET=`cset set | grep user | awk {'print $2'}`
fi
IFS=- read cpuMin cpuMax <<< ${CSET}
NBcores=$((${cpuMax} - ${cpuMin} + 1))
echo "cset/taskset: using CPUs ${CSET} (${NBcores} cores)"

# Set constants and compute number of iterations - 5kHz polling
INTV=200 # interval [us]
PRIO=91
LOOPS=$(($((${DURATION} * 1000000)) / ${INTV})) # 3000000 # for 10 mins

# Write configuration file to document settings
uname -a > rttest.conf
echo "${NBcores} cores"  >> rttest.conf
echo "CSET = ${CSET}" >> rttest.conf
echo "DURATION = ${DURATION} sec" >> rttest.conf
echo "LOOPS = ${LOOPS}" >> rttest.conf
echo "MLOCK = ${MLOCK}" >> rttest.conf
echo "INTV  = ${INTV}" >> rttest.conf
echo "PRIO  = ${PRIO}" >> rttest.conf


if [ ${STRESS} = "1" ]; then
echo "STRESS TEST"
if [ ${HASCSET} = "NO" ]; then
sudo stress-ng --cpu $NBcores --taskset=$CSET --io $NBcores --timeout $((${DURATION} + 25))s &
# removed --vm $NBcores --vm-bytes 20
else
sudo cset proc --exec user stress-ng -- --cpu $NBcores --taskset=$CSET --io $NBcores --timeout $((${DURATION} + 25))s &
# removed --vm $NBcores --vm-bytes 20G
fi
sleep 10
else
echo "IDLE TEST"
fi




echo "Running cyclictest for ${DURATION} sec [ctrl-C to stop prematurely] ..."
date
if [ ${MLOCK} = "1" ]; then
	if [ ${HASCSET} = "NO" ]; then
	sudo cyclictest --loops=${LOOPS} -m -a $CSET -t $NBcores --priority=${PRIO}  --interval=${INTV} --policy=rr -h10000 -q > tmp_output.dat
	else
	sudo cset shield --exec cyclictest -- --loops=${LOOPS} -m -a $CSET -t $NBcores --priority=${PRIO} --interval=${INTV} --policy=rr -h10000 -q > tmp_output.dat
	fi
else
	if [ ${HASCSET} = "NO" ]; then
	sudo cyclictest --loops=${LOOPS} -a $CSET -t $NBcores --priority=${PRIO}  --interval=${INTV} --policy=rr -h10000 -q > tmp_output.dat
	else
	sudo cset shield --exec cyclictest -- --loops=${LOOPS} -a $CSET -t $NBcores --priority=${PRIO} --interval=${INTV} --policy=rr -h10000 -q > tmp_output.dat
	fi
fi
date
echo ""
if [ ${STRESS} = "1" ]; then
# Meh, don't do that... it locks the machine when stress-ng-vm process stay on
#sudo pkill -SIGINT `pgrep "stress-ng$"` # only kill the PARENT stressor process.
# Wait for stressor termination
DONE=0
while [ $DONE = 0 ]
do
	pgrep stress-ng > /dev/null
	if [ $? = 0 ]; then
		sleep 2
	else
		DONE=1
	fi
done
fi

echo "Done"

####
#exit
####




# Get maximum latency
maxlatency=`grep "Max Latencies" tmp_output.dat | tr " " "\n" | sort -n | tail -1 | sed s/^0*//`
echo "Max latency = $maxlatency"



# Grep data lines, remove empty lines and create a common field separator
grep -v -e "^#" -e "^$" tmp_output.dat | tr " " "\t" > tmp_histogram.dat
rm tmp_output.dat


# Create two-column data sets with latency classes and frequency values for each core, for example
for i in `seq 1 $NBcores`
do
  column=`expr $i + 1`
  cut -f1,$column tmp_histogram.dat > tmp_histogram$i.dat
done

# rm tmp_histogram.dat


# 6. Create plot command header
echo -n -e "set title \"Latency plot\"\n\
set terminal png\n\
set terminal png size 1024,768\n\
set xlabel \"Latency (us), max $maxlatency us\"\n\
set logscale xy\n\
set xrange [1:1400]\n\
set yrange [0.8:*]\n\
set ylabel \"Number of latency samples\"\n\
set output \"plot.png\"\n\
plot " > tmp_plotcmd.gnuplot



# 7. Append plot command data references
for i in `seq 1 $NBcores`
do
  if test $i != 1
  then
    echo -n ", " >> tmp_plotcmd.gnuplot
  fi
  cpuno=`expr $i - 1`
  if test $cpuno -lt 10
  then
    title=" CPU$cpuno"
   else
    title="CPU$cpuno"
  fi
  echo -n "\"tmp_histogram$i.dat\" using 1:2 title \"$title\" with histeps lw 3 " >> tmp_plotcmd.gnuplot
done

# 8. Execute plot command
gnuplot -persist < tmp_plotcmd.gnuplot
rm tmp_plotcmd.gnuplot

for i in `seq 1 $NBcores`
do
rm tmp_histogram$i.dat
done

cp plot.png latencyplot.$1.$2.png
cp rttest.conf latencyconf.$1.$2.txt


